#!/usr/bin/env python
import os
import socket
import netaddr
import argparse
import random
import pyping
import sys

def main():
    example_text  = 'examples:\n'
    example_text += '%s -o localhost -p\n' %(sys.argv[0])
    example_text += '%s -t 127.0.0.1\n' %(sys.argv[0])
    example_text += '%s -t 127.0.0.1,127.0.0.4 -p -s 20-22,80,8080 -v\n' %(sys.argv[0])
    example_text += '%s -t 127.0.0.1/28,127.0.0.30-127.0.0.33 -s 1-1024\n' %(sys.argv[0])

    parser = argparse.ArgumentParser(description="Python Network Scanning Utility", epilog=example_text, formatter_class=argparse.RawDescriptionHelpFormatter)
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-o', '--host', help='A single target (host) to scan')
    group.add_argument('-t', '--target', help='Can specify a range between two IPs using a hyphen. Use a comma to specify multiple targets. IP and CIDR notation is also valid')
    group = parser.add_argument_group()
    group.add_argument('-s', '--scan', help='Scan the target for open ports. Create port ranges with hyphen. Multiple values can be specified using a comma')
    parser.add_argument('-p', '--ping', action='store_true', help='Ping the target to determine if it isefault)')
    parser.add_argument('-r', '--randomize', action='store_true', help='Randomize the list of addresses when scanning')
    parser.add_argument('-v', '--verbose', action='store_true', help='Show all messages generated by the tool')

    args = parser.parse_args()
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    # Parse the target based arguments
    ip_list = []
    error = False
    if args.host:
        try:
            ip_list = [netaddr.IPAddress(socket.gethostbyname(args.host))]
        except netaddr.AddrConversionError, msg:
            print "ERROR: %s (%s)" % (msg[1], args.host)
            error = True
        except netaddr.AddrFormatError, msg:
            print "ERROR: %s (%s)" % (msg[1], args.host)
            error = True
        except socket.gaierror, msg:
            print "ERROR: %s (%s)" % (msg[1], args.host)
        except MemoryError, msg:
            print "ERROR: %s (%s)" % (msg[1], args.host)
            error = True
    elif args.target:
        groups = args.target.split(',')
        for group in groups:
            # Figure if group is single IP, a range, or a subnet
            try:
                if group.count('-') == 1 and group.count('.') == 6:
                    parts = group.split('-')
                    ip_list += list(netaddr.iter_iprange(parts[0], parts[1]))
                elif group.count('/') == 1 and group.count('.') == 3:
                    ip_list += list(netaddr.IPNetwork(group).iter_hosts())
                elif group.count('.') == 3:
                    ip_list += [netaddr.IPAddress(socket.gethostbyname(group))]
                else:
                    print "ERROR: %s is an invalid range, ip, or network and CIDR notation." %(group)
                    error = True
            except netaddr.AddrConversionError, msg:
                print "ERROR: %s (%s)" % (msg[1], group)
                error = True
            except netaddr.AddrFormatError, msg:
                print "ERROR: %s (%s)" % (msg[1], group)
                error = True
            except MemoryError, msg:
                print "ERROR: %s (%s)" % (msg[1], group)
                error = True
            except socket.gaierror, msg:
                print "ERROR: %s (%s)" % (msg[1], group)
                error = True
    
    # Ensure that the scan option has ports specified
    ports = []
    if args.scan:
        # Break the ports into ranges and values
        groups = args.scan.split(",")
        for group in groups:
            parts = [int(i) for i in group.split("-")]
            if len(parts) == 1:
                ports.append(parts[0])
            elif len(parts) == 2:
                if parts[0] >= parts[1]:
                    error = True
                    print "Invalid range. %d must be lower than %d" %(parts[0], parts[1])
                else:
                    ports += range(parts[0], parts[1])
            else:
                error = True
                print "Invalid range. A range must be between two numbers"
    if error:
        exit(2)
    
    # Check to see if IP list should be shuffled
    if args.randomize:
        random.shuffle(ip_list)
        random.shuffle(ports)
    
    # Perform an action against an IP
    for ip in ip_list:
        # Check to see if the user wants to scan or ping, ping by default
        if args.scan:
            s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            for port in ports:
                try:
                    s.connect((str(ip), port))
                    print "[OPEN] %s:%d" %(ip, port)
                except socket.error, msg:
                    if args.verbose:
                        print "[CLOSED] %s:%d (%s)" %(ip, port, msg[1])
        # Do a ping scan if specified or if scan is not specified
        elif args.ping or not args.scan:
            try:
                r = pyping.ping(str(ip), 500, 1)
                if r.ret_code == 0:
                    print "[ALIVE] %s" %ip
                elif args.verbose:
                    print "[DEAD] %s" %ip
            except socket.error:
                print "Ensure you are running as root."
                exit(2)

if __name__ == "__main__":
    main()
